(define (even? x) (= (remainder x 2) 0))
(define (exp b n)
    (fast-expt-iter 1 b n))
(define (square x) (* x x))
(define (fast-expt-iter a b n)
    (cond ((= n 0) a)
          ((even? n) (fast-expt-iter a (square b) (/ n 2)))
          (else (fast-expt-iter (* a b) b (- n 1)))))
(define (compose f g)
    (lambda (x) (f (g x))))
(define (repeated f n)
    (define (r f n c)
        (cond ((= c 0) (lambda (x) x))
              ((<= c 1) f)
              (else (r (compose f f) n (- c 1)))))
    (r f n n))
(define (average-damp f)
    (lambda (x) (/ (+ x (f x)) 2.0)))
(define (r-average-damp f n)
    ((repeated average-damp n) f))
(define (fixed-point f first-guess)
    (define tolerance 0.00001)
    (define (close-enough? v1 v2)
        (< (abs (- v1 v2))
           tolerance))
    (define (try guess)
        (let ((next (f guess)))
            (if (close-enough? guess next)
                next
                (try next))))
    (try first-guess))
(define (damp-count n)
  (define (d-c n d c)
    (if (< n c)
        d
        (d-c n (+ d 1) (square (/ 2 c)))))
  (d-c n 0 2))
(define (nthroot x n)
    (define (g y) (/ x (exp y (- n 1))))
    (fixed-point (r-average-damp g (damp-count n)) 1.0))

(nthroot 10000 4)
(nthroot 1048576 20)