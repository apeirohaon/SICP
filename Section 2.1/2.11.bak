#lang sicp

(define (make-interval a b) (cons a b))
(define (upper-bound int) (car int))
(define (lower-bound int) (cdr int))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((a (>= (lower-bound x)))
        (b (>= (upper-bound x)))
        (c (>= (lower-bound y)))
        (d (>= (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (div-interval x y)
  (cond (= (upper-bound y) 0) (error "divide by zero")
        (= (lower-bound y) 0) (error "divide by zero")
        (else (mul-interval
               x
               (make-interval (/ 1.0 (upper-bound y))
                              (/ 1.0 (lower-bound y)))))))
